import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.geometry.Insets;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class UserInterfaceAppFX extends Application {

    private TextArea textArea;
    private BorderPane root;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("User Interface Application (JavaFX)");

        root = new BorderPane();

        textArea = new TextArea();
        textArea.setWrapText(true);
        root.setCenter(textArea);

        HBox buttonBar = createButtonBar(primaryStage);
        root.setTop(buttonBar);

        Scene scene = new Scene(root, 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private HBox createButtonBar(Stage stage) {
        Button btnDateTime = new Button("Show Date & Time");
        Button btnSave = new Button("Save to log.txt");
        Button btnColor = new Button("Change Background");
        Button btnExit = new Button("Exit");

        btnDateTime.setOnAction(e -> showDateTime());
        btnSave.setOnAction(e -> saveToFile(stage));
        btnColor.setOnAction(e -> changeBackground());
        btnExit.setOnAction(e -> stage.close());

        HBox buttonBar = new HBox(10, btnDateTime, btnSave, btnColor, btnExit);
        buttonBar.setPadding(new Insets(10));
        return buttonBar;
    }

    private void showDateTime() {
        String dateTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        textArea.appendText("Current Date and Time: " + dateTime + "\n");
    }

    private void saveToFile(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save Log File");
        fileChooser.setInitialFileName("log.txt");

        File file = fileChooser.showSaveDialog(stage);
        if (file != null) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                writer.write(textArea.getText());
                textArea.appendText("Saved to: " + file.getAbsolutePath() + "\n");
            } catch (IOException e) {
                showAlert("File Error", "Error saving file:\n" + e.getMessage());
            }
        }
    }

    private void changeBackground() {
        Random rand = new Random();
        int green = 100 + rand.nextInt(156);
        int red = rand.nextInt(80);
        int blue = rand.nextInt(80);
        Color fxGreen = Color.rgb(red, green, blue);

        root.setBackground(new Background(new BackgroundFill(fxGreen, CornerRadii.EMPTY, Insets.EMPTY)));
        textArea.setStyle("-fx-control-inner-background: rgb(" + red + "," + green + "," + blue + ");");
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

