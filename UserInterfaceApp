
import java.awt.*;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import javax.swing.*;

public class UserInterfaceApp {

    public static void main(String[] args) {
        JFrame frame = new JFrame("User Interface Application");
        frame.setSize(600, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        JTextArea textArea = new JTextArea();
        JScrollPane scrollPane = new JScrollPane(textArea);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        JButton btnDateTime = new JButton("Show Date & Time");
        JButton btnSave = new JButton("Save to log.txt");
        JButton btnColor = new JButton("Change Background");
        JButton btnExit = new JButton("Exit");

        buttonPanel.add(btnDateTime);
        buttonPanel.add(btnSave);
        buttonPanel.add(btnColor);
        buttonPanel.add(btnExit);

        Font buttonFont = new Font("Segoe UI", Font.PLAIN, 14);
        for (Component c : buttonPanel.getComponents()) {
            if (c instanceof JButton) {
                JButton b = (JButton) c;
                b.setFocusPainted(false);
                b.setFont(buttonFont);
            }
        }

        btnDateTime.addActionListener(e -> {
            String dateTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
            textArea.append("Current Date and Time: " + dateTime + "\n");
        });

        btnSave.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save log file");

            int userSelection = fileChooser.showSaveDialog(frame);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                    writer.write(textArea.getText());
                    writer.newLine();
                    JOptionPane.showMessageDialog(frame, "Text saved to:\n" + fileToSave.getAbsolutePath());
                } catch (FileNotFoundException fnfe) {
                    JOptionPane.showMessageDialog(frame, "File not found: " + fnfe.getMessage());
                } catch (IOException ioe) {
                    JOptionPane.showMessageDialog(frame, "Error writing to file: " + ioe.getMessage());
                }
            }
        });

        btnColor.addActionListener(e -> {
            Random rand = new Random();
            int green = 100 + rand.nextInt(156);
            int red = rand.nextInt(80);
            int blue = rand.nextInt(80);
            Color randomGreen = new Color(red, green, blue);

            frame.getContentPane().setBackground(randomGreen);
            textArea.setBackground(randomGreen);
            textArea.setOpaque(true);
        });

        btnExit.addActionListener(e -> System.exit(0));

        frame.add(buttonPanel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }
}
